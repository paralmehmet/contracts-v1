/// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.23;

import {ERC721} from "@solmate/tokens/ERC721.sol";
import {LibString} from "@solmate/utils/LibString.sol";

import {MEME20Constant} from "../libraries/MEME20Constant.sol";

/// @title Trugly's MEME404
/// @notice Contract automatically generated by https://www.trugly.meme
contract MEME721 is ERC721 {
    using LibString for uint256;

    /* ¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯*/
    /*                       ERRORS                      */
    /* ¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯*/
    // @dev Only memecoin can call this function
    error OnlyMemecoin();

    /* ¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯*/
    /*                       STORAGE                     */
    /* ¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯*/
    address public creator;
    address public memecoin;
    string public baseURI;
    uint256 public nftId;

    mapping(address => uint256) internal _ownerToId;

    /* ¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯*/
    /*                       IMPLEMENTATION              */
    /* ¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯*/
    modifier onlyMemecoin() {
        if (msg.sender != memecoin) revert OnlyMemecoin();
        _;
    }

    constructor(string memory name, string memory _symbol, address _creator, string memory _baseURI, uint256 _nftId)
        ERC721(name, _symbol)
    {
        creator = _creator;
        memecoin = msg.sender;
        baseURI = _baseURI;

        nftId = _nftId;
    }

    function tokenURI(uint256 id) public view override returns (string memory) {
        return bytes(baseURI).length > 0 ? string.concat(baseURI, id.toString()) : "";
    }

    function mint(address account, uint256 id) external onlyMemecoin {
        _ownerToId[account] = id;
        _mint(account, id);
    }

    function burn(uint256 id) external onlyMemecoin {
        address curOwner = _ownerOf[id];
        _ownerToId[curOwner] = 0;
        _burn(id);
    }

    function nftIdByOwner(address account) external view returns (uint256) {
        return _ownerToId[account];
    }
}
