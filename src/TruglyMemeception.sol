/// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.23;

import {SafeTransferLib} from "@solmate/utils/SafeTransferLib.sol";
import {WETH} from "@solmate/tokens/WETH.sol";
import {Owned} from "@solmate/auth/Owned.sol";
import {SafeCastLib} from "@solmate/utils/SafeCastLib.sol";
import {FixedPointMathLib} from "@solady/utils/FixedPointMathLib.sol";
import {ReentrancyGuard} from "@solmate/utils/ReentrancyGuard.sol";

import {MEME404} from "./types/MEME404.sol";
import {Constant} from "./libraries/Constant.sol";
import {MEME20Constant} from "./libraries/MEME20Constant.sol";
import {ILiquidityLocker} from "./interfaces/external/ILiquidityLocker.sol";
import {INonfungiblePositionManager} from "./interfaces/external/INonfungiblePositionManager.sol";
import {ITruglyMemeception} from "./interfaces/ITruglyMemeception.sol";
import {IUniswapV3Factory} from "./interfaces/external/IUniswapV3Factory.sol";
import {IUniswapV3Pool} from "./interfaces/external/IUniswapV3Pool.sol";
import {ITruglyVesting} from "./interfaces/ITruglyVesting.sol";
import {MEME20} from "./types/MEME20.sol";

/// @title The interface for the Trugly Fair Launch
/// @notice This contract is in charge of creating MEME20 & MEME404 and their fair launch
/// @notice Contract generated by https://www.trugly.meme
contract TruglyMemeception is ITruglyMemeception, Owned, ReentrancyGuard {
    using FixedPointMathLib for uint256;
    using SafeCastLib for uint256;
    using SafeTransferLib for WETH;
    using SafeTransferLib for MEME20;
    using SafeTransferLib for address;

    /* ¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯*/
    /*                       EVENTS                      */
    /* ¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯*/

    /// @dev Emitted when a MEME20 is created
    event MemeCreated(address indexed memeToken, address pool, ITruglyMemeception.MemeceptionCreationParams params);

    /// @dev Emitted when a MEMEFLUENCER is created
    event MemeKOL(address indexed memeToken, address pool, ITruglyMemeception.MemeceptionCreationParams params);

    /// @dev Emitted when a MEME404 is created
    event Meme404Created(
        address indexed memeToken,
        address pool,
        ITruglyMemeception.MemeceptionCreationParams params,
        MEME404.TierCreateParam[] tiers
    );

    /// @dev Emitted when a user buy memecoins in the fair launch
    event MemecoinBuy(address indexed memeToken, address indexed user, uint256 buyETHAmount, uint256 amountMeme);

    /// @dev Emitted when liquidity has been added to the UniV3 Pool
    event MemeLiquidityAdded(address indexed memeToken, address pool, uint256 amountMeme, uint256 amountETH);

    /// @dev Emitted when a user exits the fair launch and claims a refund
    event MemecoinExit(address indexed memeToken, address indexed user, uint256 refundETH, uint256 amountMeme);

    /// @dev Emited when the treasury is updated
    event TreasuryUpdated(address indexed oldTreasury, address indexed newTreasury);

    /// @dev Emitted when the fees are collected
    event CollectFees(
        address indexed memeToken,
        address indexed recipient,
        uint256 amount0,
        uint256 amount1,
        uint256 fee0,
        uint256 fee1
    );

    /* ¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯*/
    /*                       ERRORS                      */
    /* ¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯*/

    /// @dev Invalid Meme Address (has to be > WETH9)
    error InvalidMemeAddress();

    /// @dev Thrown when the swap fee is too high
    error MemeSwapFeeTooHigh();

    /// @dev Thrown when the vesting allocation is too high
    error VestingAllocTooHigh();

    /// @dev Thrown when the memeceptions startAt is invalid (too early/too late)
    error InvalidMemeceptionDate();

    /// @dev Thrown when the memeceptions ended and the Meme pool is launched
    error MemeLaunched();

    /// @dev Thrown when the Memeception has not started
    error MemeceptionNotStarted();

    /// @dev Thrown when address is address(0)
    error ZeroAddress();

    /// @dev Thrown when the amount is 0
    error ZeroAmount();

    /// @dev Thrown when the Locker fees is too high
    error LockerFeeTooHigh();

    /// @dev Thrown when the Locker fee structure is invalid
    error InvalidLockerFeeStructure();

    /// @dev Thrown when the target ETH is too low
    error TargetETHTooLow();

    /* ¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯*/
    /*                       STORAGE                     */
    /* ¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯¯\_(ツ)_/¯*/
    /// @dev Address of the UniswapV3 Factory
    IUniswapV3Factory public immutable v3Factory;

    /// @dev Address of the UniswapV3 NonfungiblePositionManager
    INonfungiblePositionManager public immutable v3PositionManager;

    /// @dev Address of the UNCX Locker
    ILiquidityLocker public immutable uncxLocker;

    /// @dev Vesting contract for MEME20 tokens
    ITruglyVesting public immutable vesting;

    /// @dev Address of the WETH9 contract
    WETH public immutable WETH9;

    /// @dev Mapping of memeToken => memeceptions
    mapping(address => Memeception) internal memeceptions;

    address[] internal SWAP_ROUTERS = [
        0x2626664c2603336E57B271c5C0b26F421741e481, // SwapRouter02
        0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD // UniswapRouter
    ];

    address[] internal EXEMPT_UNISWAP = [
        0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1, // LP Positions
        0x42bE4D6527829FeFA1493e1fb9F3676d2425C3C1, // Staker Address
        0x067170777BA8027cED27E034102D54074d062d71, // Fee Collector
        0x231278eDd38B00B07fBd52120CEf685B9BaEBCC1, // UNCX_V3_LOCKERS
        0xe22dDaFcE4A76DC48BBE590F3237E741e2F58Be7, // TruglyRouter (Prod)
        0x0B3cC9681b151c5BbEa095629CDD56700B5b6c87 // TruglyRouter (Testnet)
    ];

    address internal treasury;

    constructor(
        address _v3Factory,
        address _v3PositionManager,
        address _uncxLockers,
        address _WETH9,
        address _vesting,
        address _treasury,
        address _multisig
    ) Owned(_multisig) {
        if (
            _v3Factory == address(0) || _v3PositionManager == address(0) || _WETH9 == address(0)
                || _vesting == address(0) || _treasury == address(0)
        ) {
            revert ZeroAddress();
        }
        v3Factory = IUniswapV3Factory(_v3Factory);
        v3PositionManager = INonfungiblePositionManager(_v3PositionManager);
        uncxLocker = ILiquidityLocker(_uncxLockers);
        v3PositionManager.setApprovalForAll(address(uncxLocker), true);

        WETH9 = WETH(payable(_WETH9));
        vesting = ITruglyVesting(_vesting);
        treasury = _treasury;

        emit TreasuryUpdated(address(0), _treasury);
    }

    /// @inheritdoc ITruglyMemeception
    function createMeme(MemeceptionCreationParams calldata params) external nonReentrant returns (address, address) {
        _verifyCreateMeme(params);
        MEME20 memeToken = new MEME20{salt: params.salt}(params.name, params.symbol, params.creator);
        address pool = v3Factory.createPool(address(WETH9), address(memeToken), Constant.UNI_LP_SWAPFEE);
        _createMeme(params, memeToken, pool);
        emit MemeCreated(address(memeToken), pool, params);
        return (address(memeToken), pool);
    }

    /// @inheritdoc ITruglyMemeception
    function createMeme404(MemeceptionCreationParams calldata params, MEME404.TierCreateParam[] calldata tiers)
        external
        virtual
        nonReentrant
        returns (address, address)
    {
        _verifyCreateMeme(params);
        MEME404 memeToken = new MEME404{salt: params.salt}(params.name, params.symbol, params.creator);
        address pool = v3Factory.createPool(address(WETH9), address(memeToken), Constant.UNI_LP_SWAPFEE);

        /// List of exempt addresses for MEME404 NFT minting
        address[] memory exemptNFTMint = new address[](7);
        exemptNFTMint[0] = address(this);
        exemptNFTMint[1] = address(vesting);
        exemptNFTMint[2] = address(v3PositionManager);
        exemptNFTMint[3] = address(treasury);
        exemptNFTMint[4] = pool;
        exemptNFTMint[5] = params.creator;
        exemptNFTMint[6] = Constant.UNCX_TREASURY;
        memeToken.initializeTiers(tiers, exemptNFTMint);

        _createMeme(params, memeToken, pool);
        emit Meme404Created(address(memeToken), pool, params, tiers);
        return (address(memeToken), pool);
    }

    /// @inheritdoc ITruglyMemeception
    function createMemeKOL(MemeceptionCreationParams calldata params)
        external
        nonReentrant
        returns (address, address)
    {
        _verifyCreateMeme(params);
        MEME20 memeToken = new MEME20{salt: params.salt}(params.name, params.symbol, params.creator);
        address pool = v3Factory.createPool(address(WETH9), address(memeToken), Constant.UNI_LP_SWAPFEE);
        _createMeme(params, memeToken, pool);
        emit MemeKOL(address(memeToken), pool, params);
        return (address(memeToken), pool);
    }

    /// @dev Create a memecoin and memeception params
    /// @dev Also initialize the vesting
    /// @param params List of parameters for the creation of a memeception
    /// @param memeToken Address of the MEME20 or MEME404
    function _createMeme(MemeceptionCreationParams calldata params, MEME20 memeToken, address pool) internal {
        if (address(memeToken) <= address(WETH9)) revert InvalidMemeAddress();

        memeceptions[address(memeToken)] = Memeception({
            targetETH: params.targetETH,
            collectedETH: 0,
            tokenId: 0,
            pool: pool,
            swapFeeBps: params.swapFeeBps,
            creator: params.creator,
            startAt: params.startAt != uint40(0) ? params.startAt : uint40(block.timestamp),
            endedAt: 0
        });

        if (params.vestingAllocBps > 0) {
            uint256 vestingAlloc = MEME20Constant.TOKEN_TOTAL_SUPPLY.fullMulDiv(params.vestingAllocBps, 1e4);
            memeToken.transfer(address(vesting), vestingAlloc);
            vesting.startVesting(
                address(memeToken),
                params.creator,
                vestingAlloc,
                params.startAt != uint40(0) ? params.startAt : uint40(block.timestamp),
                Constant.VESTING_DURATION,
                Constant.VESTING_CLIFF
            );
        }
        uint256 burnAllocBps = Constant.CREATOR_MAX_VESTED_ALLOC_BPS - params.vestingAllocBps;
        if (burnAllocBps > 0) {
            memeToken.transfer(address(0), MEME20Constant.TOKEN_TOTAL_SUPPLY.fullMulDiv(burnAllocBps, 1e4));
        }
    }

    /// @dev Verify the validity of the parameters for the creation of a memeception
    /// @param params List of parameters for the creation of a memeception
    /// Revert if any parameters are invalid
    function _verifyCreateMeme(MemeceptionCreationParams calldata params) internal view virtual {
        if (params.startAt > uint40(block.timestamp) + Constant.MEMECEPTION_MAX_START_AT) {
            revert InvalidMemeceptionDate();
        }
        if (params.swapFeeBps > Constant.CREATOR_MAX_FEE_BPS) revert MemeSwapFeeTooHigh();
        if (params.vestingAllocBps > Constant.CREATOR_MAX_VESTED_ALLOC_BPS) revert VestingAllocTooHigh();
        if (params.targetETH < Constant.MIN_TARGET_ETH) revert TargetETHTooLow();
    }

    /// @inheritdoc ITruglyMemeception
    function buyMemecoin(address memeToken) external payable nonReentrant {
        Memeception memory memeception = memeceptions[memeToken];
        _verifyBuy(memeception);
        uint256 price = _getPricePerETH(memeception);

        uint256 buyEthAmount = msg.value;
        uint256 tokenAmount = buyEthAmount.rawMul(price);

        if (memeception.collectedETH + msg.value >= memeception.targetETH) {
            buyEthAmount = memeception.targetETH.rawSub(memeception.collectedETH);

            memeceptions[memeToken].endedAt = uint40(block.timestamp);

            tokenAmount = buyEthAmount.rawMul(price);

            /// Adding liquidity to Uni V3 Pool
            _addLiquidityToUniV3Pool(memeToken, memeception.targetETH, Constant.TOKEN_MEMECEPTION_SUPPLY);

            // Refund
            msg.sender.safeTransferETH(msg.value - buyEthAmount);
        }

        memeceptions[memeToken].collectedETH += buyEthAmount;
        MEME20(memeToken).transfer(msg.sender, tokenAmount);

        emit MemecoinBuy(memeToken, msg.sender, buyEthAmount, tokenAmount);
    }

    /// @dev Add liquidity to the UniV3 Pool and initialize the pool
    /// @param memeToken Address of the MEME20
    /// @param amountETH Amount of ETH to add to the pool
    /// @param amountMeme Amount of MEME20 to add to the pool
    function _addLiquidityToUniV3Pool(address memeToken, uint256 amountETH, uint256 amountMeme) internal virtual {
        MEME20(memeToken).initialize(
            owner,
            treasury,
            MEME20Constant.MAX_PROTOCOL_FEE_BPS,
            memeceptions[memeToken].swapFeeBps,
            memeceptions[memeToken].pool,
            SWAP_ROUTERS,
            EXEMPT_UNISWAP
        );
        ILiquidityLocker.FeeStruct memory lockFee = uncxLocker.getFee("LVP");
        uint256 amountETHMinusLockFee = amountETH;
        if (lockFee.flatFee > 0 && lockFee.flatFeeToken == address(0)) {
            if (lockFee.flatFee > Constant.MAX_LOCKER_FLAT_FEE) revert LockerFeeTooHigh();
            amountETHMinusLockFee -= lockFee.flatFee;
        }
        if (lockFee.flatFee > 0 && lockFee.flatFeeToken != address(0)) revert InvalidLockerFeeStructure();
        if (lockFee.lpFee > Constant.MAX_LOCKER_LP_FEE || lockFee.collectFee > Constant.MAX_LOCKER_COLLECT_FEE) {
            revert InvalidLockerFeeStructure();
        }

        uint160 sqrtPriceX96 = _calcSqrtPriceX96(amountETHMinusLockFee, amountMeme);
        IUniswapV3Pool(memeceptions[memeToken].pool).initialize(sqrtPriceX96);

        WETH9.deposit{value: amountETHMinusLockFee}();
        WETH9.safeApprove(address(v3PositionManager), amountETHMinusLockFee);
        MEME20(memeToken).safeApprove(address(v3PositionManager), amountMeme);

        INonfungiblePositionManager.MintParams memory params = INonfungiblePositionManager.MintParams({
            token0: address(WETH9),
            token1: memeToken,
            fee: Constant.UNI_LP_SWAPFEE,
            tickLower: Constant.TICK_LOWER,
            tickUpper: Constant.TICK_UPPER,
            amount0Desired: amountETHMinusLockFee,
            amount1Desired: amountMeme,
            amount0Min: amountETHMinusLockFee.mulDiv(99, 100),
            amount1Min: amountMeme.mulDiv(99, 100),
            recipient: address(this),
            deadline: block.timestamp + 30 minutes
        });

        (uint256 tokenId,,,) = v3PositionManager.mint(params);

        uint256 lockId = _lockLiquidity(tokenId, lockFee.flatFee);
        memeceptions[memeToken].tokenId = lockId;

        emit MemeLiquidityAdded(memeToken, memeceptions[memeToken].pool, amountMeme, amountETHMinusLockFee);
    }

    /// @dev Lock the UniV3 liquidity in the UNCX Locker
    /// @param lpTokenId The UniV3 LP Token ID
    /// @return lockId The UNCX lock ID
    function _lockLiquidity(uint256 lpTokenId, uint256 lockFee) internal virtual returns (uint256 lockId) {
        lockId = uncxLocker.lock{value: lockFee}(
            ILiquidityLocker.LockParams({
                nftPositionManager: v3PositionManager,
                nft_id: lpTokenId,
                dustRecipient: treasury,
                owner: owner,
                additionalCollector: address(this),
                collectAddress: treasury,
                unlockDate: type(uint256).max,
                countryCode: 0,
                feeName: "LVP",
                r: new bytes[](0)
            })
        );
    }

    /// @dev Check a MEME20's UniV3 Pool is initialized with liquidity
    /// @param memeception Memeception
    /// @return bool True if the pool is initialized with liquidity
    function _poolLaunched(Memeception memory memeception) private pure returns (bool) {
        return memeception.endedAt > 0;
    }

    /// @notice Verify the validity of a buy
    /// @param memeception Memeception
    function _verifyBuy(Memeception memory memeception) internal view virtual {
        if (msg.value == 0) revert ZeroAmount();
        if (_poolLaunched(memeception)) revert MemeLaunched();
        if (block.timestamp < memeception.startAt) revert MemeceptionNotStarted();
    }

    /// @inheritdoc ITruglyMemeception
    function exitMemecoin(address memeToken, uint256 amountMeme) external nonReentrant {
        Memeception memory memeception = memeceptions[memeToken];
        if (memeception.startAt == 0) revert InvalidMemeAddress();
        if (_poolLaunched(memeception)) revert MemeLaunched();

        uint256 price = _getPricePerETH(memeception);
        MEME20(memeToken).transferFrom(msg.sender, address(this), amountMeme);
        uint256 refundAmount = amountMeme.rawDiv(price);

        memeceptions[memeToken].collectedETH -= refundAmount;
        msg.sender.safeTransferETH(refundAmount);

        emit MemecoinExit(memeToken, msg.sender, refundAmount, amountMeme);
    }

    /// @inheritdoc ITruglyMemeception
    function collectFees(address memeToken) external nonReentrant {
        if (memeceptions[memeToken].tokenId == 0) revert InvalidMemeAddress();
        (uint256 amount0, uint256 amount1, uint256 fee0, uint256 fee1) =
            uncxLocker.collect(memeceptions[memeToken].tokenId, treasury, type(uint128).max, type(uint128).max);
        emit CollectFees(memeToken, treasury, amount0, amount1, fee0, fee1);
    }

    function _calcSqrtPriceX96(uint256 supplyA, uint256 supplyB) internal pure returns (uint160) {
        // Calculate the price ratio (supplyB / supplyA)
        uint256 priceRatio = FixedPointMathLib.fullMulDiv(supplyB, 1e32, supplyA);

        // Calculate the square root of the price ratio
        uint256 sqrtRatio = FixedPointMathLib.sqrt(priceRatio);

        // Convert to Q64.96 format
        return uint160(FixedPointMathLib.fullMulDiv(sqrtRatio, 2 ** 96, FixedPointMathLib.sqrt(1e32)));
    }

    /// @inheritdoc ITruglyMemeception
    function getMemeception(address memeToken) external view returns (Memeception memory) {
        return memeceptions[memeToken];
    }

    /// @inheritdoc ITruglyMemeception
    function getPricePerETH(address memeToken) public view returns (uint256) {
        Memeception memory memeception = memeceptions[memeToken];
        return _getPricePerETH(memeception);
    }

    function _getPricePerETH(Memeception memory memeception) internal pure returns (uint256) {
        return Constant.TOKEN_MEMECEPTION_SUPPLY.rawDiv(memeception.targetETH);
    }

    /// @notice receive native tokens
    receive() external payable {}

    /// @dev receive ERC721 tokens for Univ3 LP Positions
    function onERC721Received(address, address, uint256, bytes calldata) external pure returns (bytes4) {
        return this.onERC721Received.selector;
    }

    /// @notice Only the owner can call this function
    /// @dev Update the treasury address
    /// @param _newTreasury The new treasury address
    function setTreasury(address _newTreasury) external onlyOwner {
        if (_newTreasury == address(0)) revert ZeroAddress();
        emit TreasuryUpdated(treasury, _newTreasury);
        treasury = _newTreasury;
    }
}
